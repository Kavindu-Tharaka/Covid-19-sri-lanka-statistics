{"version":3,"sources":["logo.svg","Hospital.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hospital","console","log","this","props","hospitalPassed","map","hospitalElement","className","id","data-toggle","data-target","hospital_id","hospital","name_si","treatment_local","cumulative_local","treatment_foreign","cumulative_foreign","Component","App","state","data","fetch","then","res","json","setState","role","update_date_time","local_total_cases","local_total_number_of_individuals_in_hospitals","local_deaths","local_recovered","hospital_data","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1feae44b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nclass Hospital extends Component {\r\n    render() {\r\n      console.log(this.props.hospitalPassed);\r\n\r\n      const hospitalDetails = this.props.hospitalPassed.map((hospitalElement)=>{   \r\n        return(\r\n          <div className=\"card-body\">\r\n            <div id=\"container mx-5\">\r\n              <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                  <h5 className=\"mb-0\">\r\n                    <button className=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target={`#${hospitalElement.hospital_id}`}>\r\n                    {hospitalElement.hospital.name_si}\r\n                    </button>\r\n                  </h5>\r\n                </div>\r\n                <div id={hospitalElement.hospital_id} className=\"collapse\">\r\n                  <div className=\"card-body\">\r\n                    <span className=\"float-left\">ප්‍රතිකාර ලබන ලාංකිකයින් ගණන</span> <span className=\"float-right\">{hospitalElement.treatment_local} </span> <br/>\r\n                    <span className=\"float-left\">ප්‍රතිකාර ලැබූ මුළු ලාංකිකයින් ගණන</span> <span className=\"float-right\">{hospitalElement.cumulative_local} </span> <br/>\r\n                    <span className=\"float-left\">ප්‍රතිකාර ලබන විදේශිකයින් ගණන</span> <span className=\"float-right\">{hospitalElement.treatment_foreign} </span> <br/>\r\n                    <span className=\"float-left\">ප්‍රතිකාර ලැබූ මුළු විදේශිකයින් ගණන</span> <span className=\"float-right\">{hospitalElement.cumulative_foreign} </span> <br/>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        )   \r\n      });   \r\n\r\n          return hospitalDetails;\r\n        // return (\r\n        // <div className=\"card-body\">\r\n        //     <div id=\"container mx-5\">\r\n        //       <div className=\"card\">\r\n        //         <div className=\"card-header\">\r\n        //           <h5 className=\"mb-0\">\r\n        //             <button className=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target={`#${this.props.hospitalPassed.hospital_data[0].hospital_id}`}>\r\n        //             {this.props.hospitalPassed.hospital_data[0].hospital.name_si}\r\n        //             </button>\r\n        //           </h5>\r\n        //         </div>\r\n        //         <div id={this.props.hospitalPassed.hospital_data[0].hospital_id} className=\"collapse\">\r\n        //           <div className=\"card-body\">\r\n        //             <span className=\"float-left\"> දැනට ප්‍රතිකාර ලබන ලාංකික රෝගීන් ගණන </span> <span className=\"float-right\">{this.props.hospitalPassed.treatment_local} </span> <br/>\r\n        //             <span className=\"float-left\"> ප්‍රතිකාර ලැබූ මුළු ලාංකික රෝගීන් ගණන </span> <span className=\"float-right\">{this.props.hospitalPassed.cumulative_local} </span> <br/>\r\n        //             <span className=\"float-left\"> දැනට ප්‍රතිකාර ලබන විදේශීය රෝගීන් ගණන </span> <span className=\"float-right\">{this.props.hospitalPassed.treatment_foreign} </span> <br/>\r\n        //             <span className=\"float-left\"> ප්‍රතිකාර ලැබූ මුළු විදේශීය රෝගීන් ගණන </span> <span className=\"float-right\">{this.props.hospitalPassed.cumulative_foreign} </span> <br/>\r\n        //           </div>\r\n        //         </div>\r\n        //       </div>\r\n        //     </div>\r\n        // </div>\r\n        // )\r\n    }\r\n}\r\n\r\nexport default Hospital;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport { render } from '@testing-library/react';\nimport Hospital from './Hospital';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       data : {\n        \"update_date_time\": \"\",\n        \"local_new_cases\": 0,\n        \"local_total_cases\": 0,\n        \"local_total_number_of_individuals_in_hospitals\": 0,\n        \"local_deaths\": 0,\n        \"local_recovered\": 0,\n        \"global_new_cases\": 0,\n        \"global_total_cases\": 0,\n        \"global_deaths\": 0,\n        \"global_recovered\": 0,\n        \"hospital_data\": [\n            {\n                \"id\": 0,\n                \"hospital_id\": 0,\n                \"cumulative_local\": 0,\n                \"cumulative_foreign\": 0,\n                \"treatment_local\": 0,\n                \"treatment_foreign\": 0,\n                \"created_at\": \"\",\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"cumulative_total\": 0,\n                \"treatment_total\": 0,\n                \"hospital\": {\n                    \"id\": 0,\n                    \"name_si\": \"\",\n                    \"created_at\": \"\",\n                    \"updated_at\": \"\",\n                    \"deleted_at\": null\n                }\n            }\n        ]\n    }\n    }\n  }\n\n  async componentDidMount(){\n    await fetch('https://hpb.health.gov.lk/api/get-current-statistical')\n    .then(res => res.json())\n    .then(res => {\n      this.setState({\n        data : res.data\n      })\n      console.log(this.state.data)\n    })\n  }\n\n  render(){\n\n    return (\n      <div className=\"App container-fuild mt-2 mb-5\">\n        <h2> Covid-19 ශ්‍රී ලංකා දත්ත </h2>\n        <div className=\"alert alert-info p-2\" role=\"alert\">\n          <p><span className=\"float-left\">යාවත්කාලීන කළ වේලාව </span> <span className=\"float-right\">{this.state.data.update_date_time} </span></p>\n        </div>\n        <div className=\"alert alert-warning p-2\" role=\"alert\">\n          <p><span className=\"float-left\">තහවුරු කළ රෝගීන් ගණන </span> <span className=\"float-right\">{this.state.data.local_total_cases} </span></p>        \n        </div>\n        <div className=\"alert alert-primary p-2\" role=\"alert\">\n          <p><span className=\"float-left\">කොරෝනා බවට සැක පිට රෝහල් ගත කළ ගණන </span> <span className=\"float-right\">{this.state.data.local_total_number_of_individuals_in_hospitals} </span></p>\n        </div>\n        <div className=\"alert alert-danger p-2\" role=\"alert\">\n          <p><span className=\"float-left\">මරණ ගණන </span> <span className=\"float-right\">{this.state.data.local_deaths} </span></p>\n        </div>\n        <div className=\"alert alert-success p-2\" role=\"alert\">\n          <p><span className=\"float-left\">සුව වූ ගණන </span> <span className=\"float-right\">{this.state.data.local_recovered} </span></p>\n        </div>\n\n        <div id=\"container\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h5 className=\"mb-0\">\n                <button className=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseHeader\">\n                  රෝහල් අනුව දත්ත\n                </button>\n              </h5>\n            </div>\n            <div id=\"collapseHeader\" className=\"collapse\">\n              <Hospital hospitalPassed={this.state.data.hospital_data} />\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}